---
layout: post
title: "Организация API веб-служб. Ulcamp::Dev"
date: 2012-11-03 15:58
meta: true
comments: true
categories: api web-service design rails
tags: api web-service design rails
---
До того момента, пока перед нами не встает задача работы с API какого-либо сервиса, мы не задумываемся о том, как его правильнее организовать...
%br
Да, это так... Мы не задумываемся над этим вопросом, когда проектируем API для своего сервиса, если не занимались этим ранее и не наступили на грабли фидбека недовольных пользователей. 
Мы начинаем задумываться над ним только тогда, когда сами оказываемся в шкурке тех самых беспомощных пользователей, которые могут либо смириться с неудобствами, либо попытаться написать разработчикам API с просьбой упростить им жизнь... 
%br
Вот о том, как упростить жизнь разработчикам и пойдет речь.<!--more-->

%h2 Веб-служба
%div
  Для начала давайте определимся, что такое веб-служба. Как-то так получилось, что данный термин люди понимают по разному и о того, как его понимать можно по разному понимать то, о чем и пойдет речь.
  %br
  Итак, веб-служба, веб-сервис (англ. web service) — идентифицируемая конкретным адресом (домен, ип) программная система со стандартизированными интерфейсами.
  %br
  Веб-службы могут взаимодействовать друг с другом и со сторонними приложениями посредством сообщений, основанных на определённых протоколах (SOAP, XML-RPC и т. д.).
  %br
  Веб-служба является единицей модульности при использовании сервис-ориентированной архитектуры приложения.
  %br
  В обиходе веб-сервисами называют услуги, оказываемые в Интернете. В этом употреблении термин требует уточнения, идёт ли речь о поиске, веб-почте, хранении документов, файлов, закладок и т. п. Такими веб-сервисами можно пользоваться независимо от места доступа в Интернет, компьютера или браузера.
  %br
  Как видите, можно сказать по разному, мы сделаем на том, что веб службой будем считать …
%h2 API
%div
  Что такое API?
  Определение API

%h2 Нет проблем? Сейчас придумаем!
%div
  Давайте представим, у вас есть сайт, на котором вы кропотливо, изо дня в день, собираете информацию о происходящих в вашем городе мероприятиях. Не важно как вы это делает, сами ли ручками бегаете по сайтам и собираете анонсы, или же вы написали скрипт, который за вас выполняет эту работу, важно то, что эта информация оказалась актуальной и востребованной. И в один из вечеров вам на почтовый ящик пришло письмо, в котором какая-то компания спросила у вас, есть ли API, через который будет возможно забирать от вас эту информацию. Само собой, было предложено вознаграждение, которое показалось вам привлекательным. И вот перед вами встала задача запрограммировать какой-то сервис. Первым, что нужно сделать, это ответить на простой вопрос: “Какие действия пользователь может совершать с вашим сервисом?”
  %br
  Ответом на этот вопрос может быть следующее:
  %br
  %ol
    %li Получить информацию о событиях, которые могут быть в определенный промежуток времени (год, месяц, неделя, день)
    %li Получить информацию о конкретном событии
  %br
  Вроде бы немного. И ничего страшного. Всего-то нужно посмотреть на то, за какой период времени вам нужно посмотреть информацию, взять из базы то, что соответствует условиям и отдать клиенту. Ok, Вы это сделали.
  %br
  Когда дело было сделано, вы связались с потенциальным клиентом и скказали, что у вас все готово для предоставления информации и вы готовы предоставить API.
  %br
  Допустим, оно оказылось таким:
  %br
  %br
  :markdown
    Запросы:

    `GET /events/2012/11/01`

    `GET /event/123456`

    Ответы:

        {
          "events":[
            "event":{
              "date":"2012-11-01",
              "id":1
            },
            "event":{
              "date":"2012-11-01",
              "id":2
            }
          ]
        }


%h2 Не навреди! Или о версионности API
%div

%h2 Форматы данных
%div
  %ul
    %li xml
    %li json
    %li RSS
    %li php
    %li raw
    %li csv
    %li wddx

%h2 Авторизация и аунтификация
%div

%h2 Документирование
%div
  %ul
    %li
      Что?
      %ul
        %li
          Запрос:
          %ul
            %li Формат
            %li Структура
            %li Пример
        %li
          Возвращаемые данные:
          %ul
            %li Формат
            %li Структура
            %li Пример
        %li Примеры overload
    %li
      Что можно еще?
      %ul
        %li Заголовки сообщений
        %li Использование HTTP заголовков
        %li Возможные ошибки
        %li Состояния
        %li flow
        %li use case
        %li Варианты overload

%h2 Протоколы
%div

%h2 REST vs SOAP. Что выбрать?
%div
  %h3 Главные преимущества REST web services
  %ul
    %li “Легкость” – нет громоздких xml
    %li Результат понятен и легко воспринимается
    %li Легок в построении, нет необходимости в специальных инструментах
  %h3 Преимещуства SOAP
  %ul
    %li Иногда легок в использовании ©
    %li Жесткое подчинение стандарту

  %h3 REST vs SOAP
  %ul
    %li Development tools
    %li API Flexibility & Simplicity 
    %li Bandwidth Usage
    %li Security
    %li REST ain’t Perfect
    %li Type Handling
    %li Client-side Complexity
    %li Testing and Troubleshooting
    %li Server-side Complexity
    %li Caching

%h2 HTTP Headers
%div

%h2 HTTP Response Codes
%div
  %h3 Successful
  %table
    %thead
      %tr
        %th Code
        %th Назначение
        %th Описание
    %tbody
      %tr
        %td 200
        %td ok
        %td get / put
      %tr
        %td 201
        %td created
        %td post
      %tr
        %td 202
        %td accepted
        %td schedule
      %tr
        %td 204
        %td no content
        %td delete

  %h3 Redirection
  %table
    %thead
      %tr
        %th Code
        %th Назначение
    %tbody
      %tr
        %td 301
        %td Moved Permanently
      %tr
        %td 302
        %td Found
      %tr
        %td 304
        %td Not Found

  %h3 Server Error
  %table
    %thead
      %tr
        %th Code
        %th Назначение
    %tbody
      %tr
        %td 500
        %td Internal Server Error
      %tr
        %td 501
        %td Not Implemented
      %tr
        %td 503
        %td Service Unavailable
      %tr
        %td 507
        %td Insufficient Storage
      %tr
        %td 509
        %td Bandwidth Limit Exceeded

%h2 3 типа дизайна API
%div
  only HTTP Headers
  HTTP Headers + json body
  Forget the http headers

%h2 Дружественный API
%div
  pub / sub
  customer requirements
  self migration

%h2 На что стоит обратить внимание?
%div
  Ваш API прост для использования? А для “попробовать”?
  %br
  Может быть важе API должно быть RESTful?
  %br
  Вам нужно много или мало данных?
  %br
  Вы хотите контроллировать API траффик?
  %br
  Вы планируете масштабировать API?
  %br
  API должно быть понятно для потребителей услуг?
  %br
  Как вы идентифицируете кто использует ваше API?
  %br
  Какой тип аунтификации/авторизации вы используете?
  %br
  Что насчет OAuth?
  %br
  Какие новые угрозы безопасности могут существовать для API?

%h2 Инструментарий для тестирования и построения клиентов.
%div
  browser
  %br
  https://apigee.com/togo
  %br
  https://dev.twitter.com/console
  %br
  SoapUI (http://www.slideshare.net/autotestinfo/soap-ui)
  %br
  http://hurl.it/
  %br
  http://code.google.com/p/rest-client/
  %br
  http://code.google.com/apis/ajax/playground/
  %br
  HTTP4e (Eclipse)
  %br
  http://apikitchen.com/
  %br
  https://github.com/jeremys/Simple-Rest-Client-Chrome-Extension
  %br
  Postman - REST Client
  %br
  Swagger (http://swagger.wordnik.com/)
